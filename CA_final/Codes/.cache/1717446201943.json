{"date":"2024-06-03T20:23:19.472Z","courseId":"17","assignment":"AP-Spring03-CA6-phase2","trace":{"version":1024,"content":"#include \"Orders.hpp\"\n\nOrders::Orders(UTMS *_utms)\n{\n    utms = _utms;\n    post_course_offer_id = 0;\n    for (int i = 0; i < utms->get_student().size(); i++)\n    {\n        utms->get_utaccount()->conected_student_id.push_back(utms->get_student()[i]->get_sid());\n    }\n    for (int i = 0; i < utms->get_professor().size(); i++)\n    {\n        utms->get_utaccount()->conected_professor_id.push_back(utms->get_professor()[i]->get_pid());\n    }\n}\n\nvector<string> divider_order(string inputVector, char delimiter)\n{\n    vector<string> outputVector;\n\n    stringstream ss(inputVector);\n\n    string token;\n    while (getline(ss, token, delimiter))\n    {\n        outputVector.push_back(token);\n    }\n\n    return outputVector;\n}\n\nbool is_int(string command)\n{\n    istringstream c4(command);\n    int num;\n    if (c4 >> num && c4.eof())\n    {\n        return true;\n    }\n    return false;\n}\n\nbool Orders::is_not_professor(string id, UTMS *utms)\n{\n    for (int i = 0; i < utms->get_student().size(); i++)\n    {\n        if (id == utms->get_student()[i]->get_sid())\n        {\n            return true;\n        }\n    }\n    if (utms->get_utaccount()->get_id() == id)\n    {\n        return true;\n    }\n    return false;\n}\n\nCourse *Orders::find_course_by_id(string id)\n{\n    for (int i = 0; i < utms->get_course().size(); i++)\n    {\n        if (id == utms->get_course()[i]->get_cid())\n        {\n            return utms->get_course()[i];\n        }\n    }\n}\n\nStudent *Orders ::find_student_by_id(string id)\n{\n    for (int i = 0; i < utms->get_student().size(); i++)\n    {\n        if (id == utms->get_student()[i]->get_sid())\n        {\n            return utms->get_student()[i];\n        }\n    }\n    throw runtime_error(NOT_FOUND_ERROR);\n}\n\nProfessors *Orders ::find_professor_by_id_(string id)\n{\n    for (int i = 0; i < utms->get_professor().size(); i++)\n    {\n        if (id == utms->get_professor()[i]->get_pid())\n        {\n            return utms->get_professor()[i];\n        }\n    }\n}\n\nvoid Orders::Post_login(UTMS *utms, vector<string> command)\n{\n    if (!(command[2] == QUESTION_MARK))\n    {\n        throw runtime_error(BAD_REQUEST_ERROR);\n    }\n    bool flag = false;\n    for (int i = 0; i < utms->get_student().size(); i++)\n    {\n        if (utms->get_student()[i]->get_sid() == command[4] && utms->get_student()[i]->get_password() == command[6] || utms->get_student()[i]->get_sid() == command[6] && utms->get_student()[i]->get_password() == command[4])\n        {\n            cout << OK << endl;\n            utms->is_logined = true;\n            utms->is_student_logined = true;\n            utms->student_logined = utms->get_student()[i];\n            if (is_int(command[4]))\n            {\n                utms->student_id_loged = command[4];\n                utms->id_loged = command[4];\n            }\n            else\n            {\n                utms->student_id_loged = command[6];\n                utms->id_loged = command[6];\n            }\n            flag = true;\n        }\n        if (utms->get_student()[i]->get_sid() == command[4] && utms->get_student()[i]->get_password() != command[6] || utms->get_student()[i]->get_sid() == command[6] && utms->get_student()[i]->get_password() != command[4])\n        {\n            throw runtime_error(PERMISSION_DENIED_ERROR);\n        }\n    }\n\n    for (int i = 0; i < utms->get_professor().size(); i++)\n    {\n        if (utms->get_professor()[i]->get_pid() == command[4] && utms->get_professor()[i]->get_password() == command[6] || utms->get_professor()[i]->get_pid() == command[6] && utms->get_professor()[i]->get_password() == command[4])\n        {\n            cout << OK << endl;\n            utms->is_logined = true;\n            utms->is_professor_logined = true;\n            utms->professor_logined = utms->get_professor()[i];\n            if (is_int(command[4]))\n            {\n                utms->professor_id_loged = command[4];\n                utms->id_loged = command[4];\n            }\n            else\n            {\n                utms->professor_id_loged = command[6];\n                utms->id_loged = command[6];\n            }\n            flag = true;\n        }\n        if (utms->get_professor()[i]->get_pid() == command[4] && utms->get_professor()[i]->get_password() != command[6] || utms->get_professor()[i]->get_pid() == command[6] && utms->get_professor()[i]->get_password() != command[4])\n        {\n            throw runtime_error(PERMISSION_DENIED_ERROR);\n        }\n    }\n\n    if (utms->get_utaccount()->get_id() == command[4] && utms->get_utaccount()->get_password() == command[6] || utms->get_utaccount()->get_id() == command[6] && utms->get_utaccount()->get_password() == command[4])\n    {\n        cout << OK << endl;\n        utms->is_logined = true;\n        utms->is_ut_account_logined = true;\n        utms->ut_account_logined = utms->get_utaccount();\n        if (is_int(command[4]))\n        {\n            utms->ut_account_id_loged = command[4];\n        }\n        else\n        {\n            utms->ut_account_id_loged = command[6];\n        }\n        flag = true;\n    }\n\n    if (utms->get_utaccount()->get_id() == command[4] && utms->get_utaccount()->get_password() != command[6] || utms->get_utaccount()->get_id() == command[6] && utms->get_utaccount()->get_password() != command[4])\n    {\n        throw runtime_error(PERMISSION_DENIED_ERROR);\n    }\n\n    if (!flag)\n    {\n        throw runtime_error(NOT_FOUND_ERROR);\n    }\n}\n\nvoid Orders::Post_logout(UTMS *utms, vector<string> command)\n{\n    if (!(command[2] == QUESTION_MARK))\n        throw runtime_error(BAD_REQUEST_ERROR);\n    if (utms->is_logined)\n    {\n        utms->is_logined = false;\n        utms->is_professor_logined = false;\n        utms->is_student_logined = false;\n        utms->is_ut_account_logined = false;\n        cout << OK << endl;\n    }\n    else\n    {\n        throw runtime_error(PERMISSION_DENIED_ERROR);\n    }\n}\n\nbool Orders::send_notification_to_student(UTMS *utms, string notif)\n{\n    if (utms->is_student_logined)\n    {\n        Student *logined = utms->student_logined;\n\n        for (int i = 0; i < logined->get_connected_id().size(); i++)\n        {\n            if (is_student(logined->get_connected_id()[i]))\n            {\n                Student *connected_student = find_student_by_id_(logined->get_connected_id()[i]);\n                connected_student->recieve_notif(notif);\n            }\n        }\n        return true;\n    }\n    else if (utms->is_professor_logined)\n    {\n        Professors *logined = utms->professor_logined;\n\n        for (int i = 0; i < logined->conected_id.size(); i++)\n        {\n            if (is_student(logined->conected_id[i]))\n            {\n                Student *connected_student = find_student_by_id_(logined->conected_id[i]);\n                connected_student->recieve_notif(notif);\n            }\n        }\n        return true;\n    }\n    else if (utms->is_ut_account_logined)\n    {\n        for (int i = 0; i < utms->get_utaccount()->conected_student_id.size(); i++)\n        {\n            Student *connected_student = find_student_by_id_(utms->get_utaccount()->conected_student_id[i]);\n            connected_student->recieve_notif(notif);\n        }\n        return true;\n    }\n    return false;\n}\n\nbool Orders::send_notification_to_professor(UTMS *utms, string notif)\n{\n    if (utms->is_student_logined)\n    {\n        Student *logined = find_student_by_id(utms->student_id_loged);\n\n        for (int i = 0; i < logined->get_connected_id().size(); i++)\n        {\n            if (is_professor(logined->get_connected_id()[i]))\n            {\n                Professors *connected_professor = find_professor_by_id_(logined->get_connected_id()[i]);\n                connected_professor->notifications.push_back(notif);\n            }\n        }\n        return true;\n    }\n    else if (utms->is_professor_logined)\n    {\n        Professors *logined = find_professor_by_id(utms->professor_id_loged);\n\n        for (int i = 0; i < logined->conected_id.size(); i++)\n        {\n            if (is_professor(logined->conected_id[i]))\n            {\n                Professors *connected_professor = find_professor_by_id_(logined->conected_id[i]);\n                connected_professor->notifications.push_back(notif);\n            }\n        }\n        return true;\n    }\n    else if (utms->is_professor_logined)\n    {\n        for (int i = 0; i < utms->get_utaccount()->conected_professor_id.size(); i++)\n        {\n            Professors *connected_professsor = find_professor_by_id_(utms->get_utaccount()->conected_professor_id[i]);\n            connected_professsor->notifications.push_back(notif);\n        }\n        return true;\n    }\n    return false;\n}\n\nvoid Orders::Post_post(string title, string message, vector<string> command, UTMS *utms)\n{\n    if (!utms->is_logined)\n        throw runtime_error(PERMISSION_DENIED_ERROR);\n    for (int i = 0; i < utms->get_student().size(); i++)\n    {\n        if (utms->is_student_logined)\n        {\n            Posts p;\n            p.message = message;\n            p.title = title;\n            p.id = utms->get_student()[i]->get_previous() + 1;\n            if (command[command.size() - 2] == \"image\")\n                p.image_address = command[command.size() - 1];\n            utms->get_student()[i]->increase_previous();\n            utms->get_student()[i]->add_post(p);\n            cout << OK << endl;\n            string post_notif = utms->get_student()[i]->get_sid() + SPACE_DELIMITER + utms->get_student()[i]->get_name() + COLON_DELIMITER + SPACE_DELIMITER + \"New Post\";\n            if (send_notification_to_student(utms, post_notif))\n                return;\n            else if (send_notification_to_professor(utms, post_notif))\n                return;\n        }\n    }\n    for (int i = 0; i < utms->get_professor().size(); i++)\n    {\n        if (utms->is_professor_logined)\n        {\n\n            Posts p;\n            p.message = message;\n            p.title = title;\n            p.id = utms->get_professor()[i]->get_previous() + 1;\n            if (command[command.size() - 2] == \"image\")\n                p.image_address = command[command.size() - 1];\n            utms->get_professor()[i]->increase_previous();\n            utms->get_professor()[i]->add_post(p);\n            cout << OK << endl;\n            string post_notif = utms->get_professor()[i]->get_pid() + SPACE_DELIMITER + utms->get_professor()[i]->get_name() + COLON_DELIMITER + SPACE_DELIMITER + NEW_POST_MESSAGE;\n            if (send_notification_to_student(utms, post_notif))\n                return;\n            else if (send_notification_to_professor(utms, post_notif))\n                return;\n        }\n    }\n    if (utms->is_ut_account_logined)\n    {\n        Posts p;\n        p.message = message;\n        p.title = title;\n        p.id = utms->get_utaccount()->get_previous() + 1;\n        if (command[command.size() - 2] == \"image\")\n            p.image_address = command[command.size() - 1];\n        utms->get_utaccount()->increase_previous();\n        utms->get_utaccount()->add_post(p);\n        cout << OK << endl;\n        string post_notif = UT_ACCOUNT_NOTIF;\n        if (send_notification_to_student(utms, post_notif))\n            return;\n        else if (send_notification_to_professor(utms, post_notif))\n            return;\n    }\n}\n\nbool Orders::connected_search(string id, UTMS *utms)\n{\n    for (int i = 0; i < utms->get_student().size(); i++)\n    {\n        if (utms->get_student()[i]->get_sid() == id)\n        {\n            return true;\n        }\n    }\n    for (int i = 0; i < utms->get_professor().size(); i++)\n    {\n        if (utms->get_professor()[i]->get_pid() == id)\n        {\n            return true;\n        }\n    }\n    if (utms->get_utaccount()->get_id() == id)\n    {\n        return true;\n    }\n    return false;\n}\n\nbool Orders::is_connected(string id, UTMS *utms)\n{\n    for (int j = 0; j < utms->get_student().size(); j++)\n    {\n        if (utms->get_student()[j]->get_sid() == utms->student_id_loged)\n        {\n            Student *s = find_student_by_id_(utms->student_id_loged);\n            for (int i = 0; i < s->get_connected_id().size(); i++)\n            {\n                if (id == s->get_connected_id()[i])\n                {\n                    return true;\n                }\n            }\n        }\n    }\n\n    for (int j = 0; j < utms->get_professor().size(); j++)\n    {\n        if (utms->get_professor()[j]->get_pid() == utms->professor_id_loged)\n        {\n            Professors *p = find_professor_by_id_(utms->professor_id_loged);\n            for (int i = 0; i < p->conected_id.size(); i++)\n            {\n                if (id == p->conected_id[i])\n                {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\nvoid Orders::Post_connect(string id, UTMS *utms)\n{\n    if (!utms->is_logined)\n        throw runtime_error(PERMISSION_DENIED_ERROR);\n\n    if (utms->is_ut_account_logined)\n        throw runtime_error(PERMISSION_DENIED_ERROR);\n\n    if (!(is_int(id) && stoi(id) > NATURAL_NUMBER))\n        throw runtime_error(BAD_REQUEST_ERROR);\n\n    if (is_connected(id, utms))\n        throw runtime_error(BAD_REQUEST_ERROR);\n\n    if (!connected_search(id, utms))\n        throw runtime_error(NOT_FOUND_ERROR);\n\n    if (utms->is_student_logined)\n    {\n        Student *s = utms->student_logined;\n        s->add_connection(id);\n\n        for (int i = 0; i < utms->get_professor().size(); i++)\n        {\n            if (utms->get_professor()[i]->get_pid() == id)\n            {\n                Professors *p = utms->get_professor()[i];\n                p->conected_id.push_back(utms->student_id_loged);\n            }\n        }\n\n        for (int i = 0; i < utms->get_student().size(); i++)\n        {\n            if (utms->get_student()[i]->get_sid() == id)\n            {\n                Student *ss = utms->get_student()[i];\n                ss->add_connection(utms->student_id_loged);\n            }\n        }\n        cout << OK << endl;\n    }\n    else if (utms->is_professor_logined)\n    {\n        Professors *p = find_professor_by_id_(utms->professor_id_loged);\n        p->conected_id.push_back(id);\n        for (int i = 0; i < utms->get_professor().size(); i++)\n        {\n            if (utms->get_professor()[i]->get_pid() == id)\n            {\n                Professors *p = find_professor_by_id(id);\n                p->conected_id.push_back(utms->professor_id_loged);\n            }\n        }\n\n        for (int i = 0; i < utms->get_student().size(); i++)\n        {\n            if (utms->get_student()[i]->get_sid() == id)\n            {\n                Student *ss = find_student_by_id_(id);\n                ss->add_connection(utms->professor_id_loged);\n            }\n        }\n        cout << OK << endl;\n    }\n}\n\nbool Orders::have_course(string course_id, UTMS *utms)\n{\n    for (int i = 0; i < utms->get_course().size(); i++)\n    {\n        if (course_id == utms->get_course()[i]->get_cid())\n        {\n            return true;\n        }\n    }\n    return false;\n}\n\nbool Orders::have_major(string id, UTMS *utms, Professors *professor)\n{\n    Course *c = find_course_by_id(id);\n    vector<string> majors_id = divider_order(c->get_major_id(), SEMI_COLON_DELIMITER);\n    for (int i = 0; i < majors_id.size(); i++)\n    {\n        if (majors_id[i] == professor->get_major_id())\n        {\n            return true;\n        }\n    }\n    return false;\n}\n\nbool Orders::is_conflict_professor(Time t, Professors *professor)\n{\n    return professor->check_time(t);\n}\n\nbool Orders::is_conflict_student(Time t, Student *s)\n{\n    return s->check_time(t);\n}\n\nvoid Orders::Post_course_offer(vector<string> command, UTMS *utms)\n{\n    vector<string> temp = divider_order(command[10], COLON_DELIMITER);\n    vector<string> help = divider_order(temp[1], DASH_DELIMITER);\n\n    Time t;\n    t.day = temp[0];\n    t.from = help[0];\n    t.to = help[1];\n    if (!utms->is_logined || !utms->is_ut_account_logined)\n    {\n        throw runtime_error(PERMISSION_DENIED_ERROR);\n    }\n    if (!is_int(command[4]) || !is_int(command[6]) || !is_int(command[8]) || !is_int(command[14]))\n    {\n        throw runtime_error(BAD_REQUEST_ERROR);\n    }\n    if (stoi(command[4]) <= 0 || stoi(command[6]) <= 0 || stoi(command[8]) <= 0 || stoi(command[14]) <= 0)\n    {\n        throw runtime_error(BAD_REQUEST_ERROR);\n    }\n    if (!have_course(command[4], utms))\n    {\n        throw runtime_error(NOT_FOUND_ERROR);\n    }\n    else\n    {\n        if (!is_not_professor(command[6], utms))\n        {\n            Professors *found_pro = find_professor_by_id(command[6]);\n            if (!have_major(command[4], utms, found_pro))\n            {\n                throw runtime_error(PERMISSION_DENIED_ERROR);\n            }\n            if (!is_conflict_professor(t, found_pro))\n            {\n                throw runtime_error(PERMISSION_DENIED_ERROR);\n            }\n        }\n        else\n        {\n            throw runtime_error(PERMISSION_DENIED_ERROR);\n        }\n        Professors *found_pro = find_professor_by_id(command[6]);\n\n        Exam_date e_d;\n        e_d.day = divider_order(command[12], SLASH_DELIMITER)[2];\n        e_d.month = divider_order(command[12], SLASH_DELIMITER)[1];\n        e_d.year = divider_order(command[12], SLASH_DELIMITER)[0];\n\n        int index_id;\n        index_id = utms->get_utaccount()->get_previous_course_offer() + 1;\n\n        course_offer c_o;\n        c_o.course_id = stoi(command[4]);\n        c_o.professsor_id = stoi(command[6]);\n        c_o.capacity = stoi(command[8]);\n        c_o.time = t;\n        c_o.exam_date = e_d;\n        c_o.class_number = stoi(command[14]);\n        c_o.course_offer_id = index_id;\n        course_offers.push_back(c_o);\n        utms->get_utaccount()->increase_previous_course_offer();\n        is_offer = true;\n        string post_notif = found_pro->get_pid() + SPACE_DELIMITER + found_pro->get_name() + NEW_COURSE_OFFERING_MESSAGE;\n        cout << OK << endl;\n\n        if (send_notification_to_student(utms, post_notif))\n            return;\n        else if (send_notification_to_professor(utms, post_notif))\n            return;\n    }\n}\n\nvoid ok_post(string line, string &title, string &message)\n{\n    vector<string> temp = divider_order(line, DOUBLE_QUATATION_DELIMITER);\n    title = temp[1];\n    message = temp[3];\n}\n\nvoid Orders::Post_profile_photo(vector<string> command, UTMS *utms)\n{\n    if (!utms->is_logined)\n        throw runtime_error(PERMISSION_DENIED_ERROR);\n\n    if (utms->is_student_logined)\n    {\n        Student *s = utms->student_logined;\n        s->add_profile(command[4]);\n    }\n    if (utms->is_professor_logined)\n    {\n        Professors *p = utms->professor_logined;\n        p->add_profile(command[4]);\n    }\n    if (utms->is_ut_account_logined)\n    {\n        UTaccount *ut = utms->ut_account_logined;\n        ut->add_profile(command[4]);\n    }\n}\n\nvoid Orders::Post_course_post(vector<string> command, UTMS *utms, string line) // dgbdgdrsgerg\n{\n    if (!utms->is_logined)\n        throw runtime_error(PERMISSION_DENIED_ERROR);\n    course_offer co = find_course_offer_by_id(command[4]);\n    Course *c = find_course_by_id(to_string(co.course_id));\n    string name = c->get_name();\n\n    bool flag = false;\n    if (to_string(co.professsor_id) == utms->professor_id_loged)\n    {\n        flag = true;\n    }\n    // if (!flag)//ta intru\n    // {\n    //     for (int i = 0; i < co.ta_id.size(); i++)\n    //     {\n    //         if (to_string(co.ta_id[i]) == utms->student_id_loged)\n    //         {\n    //             flag = true;\n    //             break;\n    //         }\n    //     }\n    // }\n    if (!flag)\n    {\n        throw runtime_error(PERMISSION_DENIED_ERROR);\n    }\n    Posts p;\n    string message = NULL_STRING;\n    string title = NULL_STRING;\n    ok_post(line, title, message);\n    p.title = title;\n    p.message = message;\n    p.id = post_course_offer_id + 1;\n    post_course_offer_id++;\n    if (command[command.size() - 2] == \"image\")\n        p.image_address = command[command.size() - 1];\n    p.author_id = utms->id_loged;\n    co.posts.push_back(p);\n    cout << OK << endl;\n    string post_notif = to_string(co.course_offer_id) + SPACE_DELIMITER + name + \": New Course Post\";\n    if (send_notification_to_student(utms, post_notif))\n        return;\n    else if (send_notification_to_professor(utms, post_notif))\n        return;\n}\n\nvoid Orders::Post_ta_form(vector<string> command, UTMS *utms, string line)\n{\n    \n}\n\nvoid Orders ::handeling_Post(vector<string> command, string line)\n{\n    if (!utms->is_logined && command[1] == LOGIN_REQUEST)\n    {\n        if (command[3] == ID)\n        {\n            if (command[5] != PASSWORD)\n                throw runtime_error(BAD_REQUEST_ERROR);\n            Post_login(utms, command);\n        }\n        else if (command[5] == ID)\n        {\n            if (command[3] != PASSWORD)\n                throw runtime_error(BAD_REQUEST_ERROR);\n            Post_login(utms, command);\n        }\n        else\n        {\n            throw runtime_error(BAD_REQUEST_ERROR);\n        }\n    }\n\n    else if (utms->is_logined && command[1] == LOGIN_REQUEST)\n    {\n        throw runtime_error(PERMISSION_DENIED_ERROR);\n    }\n\n    else if (command[1] == LOGOUT_REQUEST)\n    {\n        Post_logout(utms, command);\n    }\n\n    else if (command[1] == POST_REQUEST)\n    {\n        string title = NULL_STRING;\n        string message = NULL_STRING;\n        ok_post(line, title, message);\n        Post_post(title, message, command, utms);\n    }\n\n    else if (command[1] == CONNECT_REQUEST)\n    {\n        Post_connect(command[4], utms);\n    }\n\n    else if (command[1] == COURSE_OFFER_REQUEST)\n    {\n        Post_course_offer(command, utms);\n    }\n\n    else if (command[1] == \"profile_photo\")\n    {\n        Post_profile_photo(command, utms);\n    }\n\n    else if (command[1] == \"course_post\")\n    {\n        Post_course_post(command, utms, line);\n    }\n    else if (command[1] == \"ta_form\")\n    {\n        Post_ta_form(command, utms, line);\n    }\n\n    else\n    {\n        throw runtime_error(NOT_FOUND_ERROR);\n    }\n}\n\nStudent *Orders ::find_student_by_id_(string id)\n{\n    for (int i = 0; i < utms->get_student().size(); i++)\n    {\n        if (id == utms->get_student()[i]->get_sid())\n        {\n            return utms->get_student()[i];\n        }\n    }\n}\n\nProfessors *Orders ::find_professor_by_id(string id)\n{\n    for (int i = 0; i < utms->get_professor().size(); i++)\n    {\n        if (id == utms->get_professor()[i]->get_pid())\n        {\n            return utms->get_professor()[i];\n        }\n    }\n    throw runtime_error(NOT_FOUND_ERROR);\n}\n\nvoid Orders::Delete_post(vector<string> command)\n\n{\n    if (!utms->is_logined)\n        throw runtime_error(PERMISSION_DENIED_ERROR);\n    if (utms->is_ut_account_logined)\n    {\n        utms->get_utaccount()->delete_post(command[4]);\n    }\n    else if (utms->is_student_logined)\n    {\n        Student *s = find_student_by_id(utms->student_id_loged);\n        s->delete_post(command[4]);\n    }\n    else if (utms->is_professor_logined)\n    {\n        Professors *p = find_professor_by_id(utms->professor_id_loged);\n        p->delete_post(command[4]);\n    }\n}\n\nvoid Orders::Delete_my_course(string id)\n{\n    if (!utms->is_logined)\n        throw runtime_error(PERMISSION_DENIED_ERROR);\n    if (!(is_int(id) && stoi(id) >= NATURAL_NUMBER))\n        throw runtime_error(BAD_REQUEST_ERROR);\n    Student *s = utms->student_logined;\n    s->delete_my_course(id);\n    string post_notif = s->get_sid() + SPACE_DELIMITER + s->get_name() + DELETE_COURSE_MESSAGE;\n    if (send_notification_to_student(utms, post_notif))\n        return;\n    else if (send_notification_to_professor(utms, post_notif))\n        return;\n    cout << OK << endl;\n}\n\nvoid Orders ::handeling_Delete(vector<string> command)\n{\n    if (command[1] == POST_REQUEST)\n    {\n        Delete_post(command);\n    }\n    else if (command[1] == MY_COURSES_REQUEST)\n    {\n        Delete_my_course(command[4]);\n    }\n    else\n        throw runtime_error(NOT_FOUND_ERROR);\n}\n\nvoid Orders::Get_notification(vector<string> command, UTMS *utms)\n{\n    if (!utms->is_logined)\n    {\n        throw runtime_error(PERMISSION_DENIED_ERROR);\n    }\n    if (utms->is_ut_account_logined)\n        throw runtime_error(PERMISSION_DENIED_ERROR);\n    if (utms->is_student_logined)\n    {\n        Student *s = utms->student_logined;\n        s->view_notif();\n    }\n    if (utms->is_professor_logined)\n    {\n        Professors *p = utms->professor_logined;\n        if (p->notifications.size() > NATURAL_NUMBER)\n        {\n            for (int i = p->notifications.size() - 1; i >= 0; i--)\n            {\n\n                cout << p->notifications[i] << endl;\n            }\n        }\n\n        else\n        {\n            throw runtime_error(EMPTY_ERROR);\n        }\n        p->notifications.clear();\n    }\n}\n\ncourse_offer Orders::find_course_offer_by_id(string id)\n{\n    for (int i = 0; i < course_offers.size(); i++)\n    {\n        if (stoi(id) == course_offers[i].course_offer_id)\n        {\n            return course_offers[i];\n        }\n    }\n    throw runtime_error(NOT_FOUND_ERROR);\n}\n\nvoid Orders::Get_courses(string id, UTMS *utms)\n{\n    if (!utms->is_logined)\n        throw runtime_error(PERMISSION_DENIED_ERROR);\n    if (utms->is_ut_account_logined)\n        throw runtime_error(PERMISSION_DENIED_ERROR);\n    if (!(is_int(id) && stoi(id) >= NATURAL_NUMBER))\n        throw runtime_error(BAD_REQUEST_ERROR);\n    course_offer co = find_course_offer_by_id(id);\n    Professors *p = find_professor_by_id_(to_string(co.professsor_id));\n    Course *c = find_course_by_id(to_string(co.course_id));\n    cout << co.course_offer_id << SPACE_DELIMITER << c->get_name() << SPACE_DELIMITER << co.capacity << SPACE_DELIMITER << p->get_name() << SPACE_DELIMITER << co.time.day << COLON_DELIMITER << co.time.from << DASH_DELIMITER << co.time.to\n         << SPACE_DELIMITER << co.exam_date.year << SLASH_DELIMITER << co.exam_date.month << SLASH_DELIMITER << co.exam_date.day << SPACE_DELIMITER << co.class_number << endl;\n}\n\nvoid Orders::Get_all_courses(UTMS *utms)\n{\n    if (!utms->is_logined)\n        throw runtime_error(PERMISSION_DENIED_ERROR);\n    if (utms->is_ut_account_logined)\n        throw runtime_error(PERMISSION_DENIED_ERROR);\n    if (course_offers.size() == NATURAL_NUMBER)\n        throw runtime_error(EMPTY_ERROR);\n\n    for (int i = 0; i < course_offers.size(); i++)\n    {\n        Professors *p = find_professor_by_id_(to_string(course_offers[i].professsor_id));\n        Course *c = find_course_by_id(to_string(course_offers[i].course_id));\n        cout << course_offers[i].course_offer_id << SPACE_DELIMITER << c->get_name() << SPACE_DELIMITER << course_offers[i].capacity << SPACE_DELIMITER << p->get_name() << endl;\n    }\n}\n\nbool Orders::is_student(string id)\n{\n    for (int i = 0; i < utms->get_student().size(); i++)\n    {\n        if (utms->get_student()[i]->get_sid() == id)\n        {\n            return true;\n        }\n    }\n    return false;\n}\n\nbool Orders::is_professor(string id)\n{\n    for (int i = 0; i < utms->get_professor().size(); i++)\n    {\n        if (utms->get_professor()[i]->get_pid() == id)\n        {\n            return true;\n        }\n    }\n    return false;\n}\n\nbool Orders::is_ut_account(string id)\n{\n    if (utms->get_utaccount()->get_id() == id)\n    {\n        return true;\n    }\n    return false;\n}\n\nMajor *Orders::find_major_by_id(string id)\n{\n    for (int i = 0; i < utms->get_major().size(); i++)\n    {\n        if (id == utms->get_major()[i]->get_mid())\n        {\n            return utms->get_major()[i];\n        }\n    }\n}\n\ncourse_offer Orders::find_course_offer_by_pro_id(string id)\n{\n    for (int i = 0; i < course_offers.size(); i++)\n    {\n        if (stoi(id) == course_offers[i].professsor_id)\n        {\n            return course_offers[i];\n        }\n    }\n    throw runtime_error(NOT_FOUND_ERROR);\n}\n\nvoid Orders::Get_post(string id, string post_id, UTMS *utms)\n{\n    if (!utms->is_logined)\n        throw runtime_error(PERMISSION_DENIED_ERROR);\n    if (!(is_int(id) && stoi(id) >= NATURAL_NUMBER) || !(is_int(post_id) && stoi(post_id) > 0))\n        throw runtime_error(BAD_REQUEST_ERROR);\n    if (utms->is_ut_account_logined)\n        throw runtime_error(PERMISSION_DENIED_ERROR);\n    if (is_student(id))\n    {\n        Student *s = find_student_by_id_(id);\n        if (s->get_posts().size() < stoi(post_id))\n            throw runtime_error(NOT_FOUND_ERROR);\n\n        string title = s->get_posts()[stoi(post_id) - 1].title;\n        string message = s->get_posts()[stoi(post_id) - 1].message;\n        string name = s->get_name();\n        string semester = s->get_semester();\n        Major *m = find_major_by_id(s->get_major_id());\n        string major_name = m->get_major_name();\n        cout << name << SPACE_DELIMITER << major_name << SPACE_DELIMITER << semester << SPACE_DELIMITER;\n        for (int i = 0; i < s->get_my_courses().size(); i++)\n        {\n            Course *c = find_course_by_id(to_string(s->get_my_courses()[i].course_id));\n            cout << c->get_name() << COMMA_DELIMITER << endl;\n        }\n        cout << endl;\n        cout << SPACE_DELIMITER << post_id << SPACE_DELIMITER << DOUBLE_QUATATION_DELIMITER << title << DOUBLE_QUATATION_DELIMITER << SPACE_DELIMITER << DOUBLE_QUATATION_DELIMITER << message << DOUBLE_QUATATION_DELIMITER << endl;\n    }\n    else if (is_professor(id))\n    {\n        Professors *p = find_professor_by_id_(id);\n        if (p->get_posts().size() < stoi(post_id))\n            throw runtime_error(NOT_FOUND_ERROR);\n\n        string title = p->get_posts()[stoi(post_id) - 1].title;\n        string message = p->get_posts()[stoi(post_id) - 1].message;\n        string name = p->get_name();\n        string position = p->get_position();\n        Major *m = find_major_by_id(p->get_major_id());\n        string major_name = m->get_major_name();\n        course_offer c_o = find_course_offer_by_pro_id(id);\n        string course_id = to_string(c_o.course_id);\n        Course *c = find_course_by_id(course_id);\n        string courses = c->get_name();\n\n        cout << name << SPACE_DELIMITER << major_name << SPACE_DELIMITER << position << SPACE_DELIMITER << courses << SPACE_DELIMITER << post_id << SPACE_DELIMITER << DOUBLE_QUATATION_DELIMITER << title << DOUBLE_QUATATION_DELIMITER << SPACE_DELIMITER << DOUBLE_QUATATION_DELIMITER << message << DOUBLE_QUATATION_DELIMITER << endl;\n    }\n    else if (is_ut_account(id))\n    {\n        if (utms->get_utaccount()->get_posts().size() < stoi(post_id))\n            throw runtime_error(NOT_FOUND_ERROR);\n\n        string title = utms->get_utaccount()->get_posts()[stoi(post_id) - 1].title;\n        string messages = utms->get_utaccount()->get_posts()[stoi(post_id) - 1].message;\n        cout << UT_ACCOUNT_PASSWORD_REQUEST << endl;\n        cout << post_id << SPACE_DELIMITER << DOUBLE_QUATATION_DELIMITER << title << DOUBLE_QUATATION_DELIMITER << SPACE_DELIMITER << DOUBLE_QUATATION_DELIMITER << messages << DOUBLE_QUATATION_DELIMITER << endl;\n    }\n    else\n        throw runtime_error(NOT_FOUND_ERROR);\n}\n\nbool Orders::have_course_offer(string id)\n{\n    for (int i = 0; i < course_offers.size(); i++)\n    {\n        if (stoi(id) == course_offers[i].professsor_id)\n        {\n            return true;\n        }\n    }\n    return false;\n}\n\nvoid Orders::Get_personal_page(string id, UTMS *utms)\n{\n    if (!utms->is_logined)\n        throw runtime_error(PERMISSION_DENIED_ERROR);\n    if (!(is_int(id) && stoi(id) >= NATURAL_NUMBER))\n        throw runtime_error(BAD_REQUEST_ERROR);\n    if (utms->is_ut_account_logined)\n        throw runtime_error(PERMISSION_DENIED_ERROR);\n\n    if (is_student(id))\n    {\n        Student *s = find_student_by_id_(id);\n        string name = s->get_name();\n        string semester = s->get_semester();\n        Major *m = find_major_by_id(s->get_major_id());\n        string major_name = m->get_major_name();\n\n        cout << name << SPACE_DELIMITER << major_name << SPACE_DELIMITER << semester << SPACE_DELIMITER;\n        for (int i = 0; i < s->get_my_courses().size(); i++)\n        {\n            Course *c = find_course_by_id(to_string(s->get_my_courses()[i].course_id));\n            cout << c->get_name();\n            if (i < s->get_my_courses().size() - 1)\n                cout << COMMA_DELIMITER;\n        }\n        cout << endl;\n        for (int i = s->get_posts().size() - 1; i >= 0; i--)\n        {\n            cout << s->get_posts()[i].id << SPACE_DELIMITER << DOUBLE_QUATATION_DELIMITER << s->get_posts()[i].title << DOUBLE_QUATATION_DELIMITER << endl;\n        }\n    }\n    else if (is_professor(id))\n    {\n        Professors *p = find_professor_by_id_(id);\n        string name = p->get_name();\n        string position = p->get_position();\n        Major *m = find_major_by_id(p->get_major_id());\n        string major_name = m->get_major_name();\n        if (have_course_offer(id))\n        {\n            course_offer c_o = find_course_offer_by_pro_id(id);\n            string course_id = to_string(c_o.course_id);\n            Course *c = find_course_by_id(course_id);\n            string courses = c->get_name();\n            cout << name << SPACE_DELIMITER << major_name << SPACE_DELIMITER << position << SPACE_DELIMITER << courses << endl;\n        }\n        else\n        {\n            cout << name << SPACE_DELIMITER << major_name << SPACE_DELIMITER << position << SPACE_DELIMITER << endl;\n        }\n\n        for (int i = p->get_posts().size() - 1; i >= 0; i--)\n        {\n            cout << p->get_posts()[i].id << SPACE_DELIMITER << DOUBLE_QUATATION_DELIMITER << p->get_posts()[i].title << DOUBLE_QUATATION_DELIMITER << endl;\n        }\n    }\n    else if (is_ut_account(id))\n    {\n        cout << UT_ACCOUNT_PASSWORD_REQUEST << endl;\n        for (int i = utms->get_utaccount()->get_posts().size() - 1; i >= 0; i--)\n        {\n            cout << utms->get_utaccount()->get_posts()[i].id << SPACE_DELIMITER << DOUBLE_QUATATION_DELIMITER << utms->get_utaccount()->get_posts()[i].title << DOUBLE_QUATATION_DELIMITER << endl;\n        }\n    }\n    else\n        throw runtime_error(NOT_FOUND_ERROR);\n}\n\nvoid Orders::Get_my_courses(UTMS *utms)\n{\n    if (utms->is_ut_account_logined)\n        throw runtime_error(PERMISSION_DENIED_ERROR);\n    Student *s = utms->student_logined;\n    if (s->get_my_courses().size() == NATURAL_NUMBER)\n        throw runtime_error(EMPTY_ERROR);\n    if (utms->is_ut_account_logined)\n        throw runtime_error(PERMISSION_DENIED_ERROR);\n    for (int i = 0; i < s->get_my_courses().size(); i++)\n    {\n        int id = s->get_my_courses()[i].course_offer_id;\n        Course *c = find_course_by_id(to_string(s->get_my_courses()[i].course_id));\n        string name = c->get_name();\n        int capacity = s->get_my_courses()[i].capacity;\n        Professors *p = find_professor_by_id_(to_string(s->get_my_courses()[i].professsor_id));\n        cout << id << SPACE_DELIMITER << name << SPACE_DELIMITER << capacity << SPACE_DELIMITER << p->get_name() << SPACE_DELIMITER << s->get_my_courses()[i].time.day << COLON_DELIMITER << s->get_my_courses()[i].time.from\n             << DASH_DELIMITER << s->get_my_courses()[i].time.to << SPACE_DELIMITER << s->get_my_courses()[i].exam_date.year << SLASH_DELIMITER << s->get_my_courses()[i].exam_date.month << SLASH_DELIMITER << s->get_my_courses()[i].exam_date.day << SPACE_DELIMITER << s->get_my_courses()[i].class_number << endl;\n    }\n}\n\nvoid Orders::Get_course_channel(string id, UTMS *utms) // dthdthtdrtfh\n{\n    if (!utms->is_logined)\n        throw runtime_error(PERMISSION_DENIED_ERROR);\n\n    course_offer co = find_course_offer_by_id(id);\n    Course *c = find_course_by_id(to_string(co.course_id));\n    Professors *p = find_professor_by_id_(to_string(co.professsor_id));\n    bool flag = false;\n    if (to_string(co.professsor_id) == utms->professor_id_loged)\n    {\n        flag = true;\n    }\n    if (!flag)\n    {\n        for (int i = 0; i < co.ta_id.size(); i++)\n        {\n            if (to_string(co.ta_id[i]) == utms->student_id_loged)\n            {\n                flag = true;\n                break;\n            }\n        }\n    }\n    if (!flag)\n    {\n        if (utms->is_student_logined)\n        {\n            Student *s = utms->student_logined;\n            for (int i = 0; i < s->get_my_courses().size(); i++)\n            {\n                if (s->get_my_courses()[i].course_offer_id == stoi(id))\n                {\n                    flag = true;\n                    break;\n                }\n            }\n        }\n    }\n    if (!flag)\n    {\n        throw runtime_error(PERMISSION_DENIED_ERROR);\n    }\n\n    cout << co.course_offer_id << SPACE_DELIMITER << c->get_name() << SPACE_DELIMITER << co.capacity << SPACE_DELIMITER << p->get_name()\n         << SPACE_DELIMITER << co.time.day << COLON_DELIMITER << co.time.from << DASH_DELIMITER << co.time.to << SPACE_DELIMITER << co.exam_date.year << SLASH_DELIMITER << co.exam_date.month << SLASH_DELIMITER << co.exam_date.day << SPACE_DELIMITER << co.class_number << endl;\n    for (int i = 0; i < co.posts.size(); i++)\n    {\n        if (is_professor(co.posts[i].author_id))\n        {\n            Professors *pro = find_professor_by_id_(co.posts[i].author_id);\n            cout << co.posts[i].id << SPACE_DELIMITER << pro->get_name() << SPACE_DELIMITER << co.posts[i].title << endl;\n        }\n        else if (is_student(co.posts[i].author_id))\n        {\n            Student *stu = find_student_by_id_(co.posts[i].author_id);\n            cout << co.posts[i].id << SPACE_DELIMITER << stu->get_name() << SPACE_DELIMITER << co.posts[i].title << endl;\n        }\n    }\n}\n\nvoid Orders::Get_course_post(string id, string post_id, UTMS *utms) // dsrhsrttrsytsytsstye\n{\n    if (!utms->is_logined)\n        throw runtime_error(PERMISSION_DENIED_ERROR);\n    course_offer co = find_course_offer_by_id(id);\n    Course *c = find_course_by_id(to_string(co.course_offer_id));\n    Professors *pro = find_professor_by_id_(to_string(co.professsor_id));\n    bool flag = false;\n    if (to_string(co.professsor_id) == utms->professor_id_loged)\n    {\n        flag = true;\n    }\n    if (!flag)\n    {\n        for (int i = 0; i < co.ta_id.size(); i++)\n        {\n            if (to_string(co.ta_id[i]) == utms->student_id_loged)\n            {\n                flag = true;\n                break;\n            }\n        }\n    }\n    if (!flag)\n    {\n        if (utms->is_student_logined)\n        {\n            Student *s = utms->student_logined;\n            for (int i = 0; i < s->get_my_courses().size(); i++)\n            {\n                if (s->get_my_courses()[i].course_offer_id == stoi(id))\n                {\n                    flag = true;\n                    break;\n                }\n            }\n        }\n    }\n    if (!flag)\n    {\n        throw runtime_error(PERMISSION_DENIED_ERROR);\n    }\n    for (int i = 0; i < co.posts.size(); i++)\n    {\n        if (co.posts[i].id == stoi(post_id))\n        {\n\n            cout << co.course_offer_id << SPACE_DELIMITER << c->get_name() << SPACE_DELIMITER << co.capacity << SPACE_DELIMITER << pro->get_name() << SPACE_DELIMITER\n                 << co.time.day << COLON_DELIMITER << co.time.from << DASH_DELIMITER << co.time.to << SPACE_DELIMITER << co.exam_date.year << SLASH_DELIMITER << co.exam_date.month << SLASH_DELIMITER << co.exam_date.day << SPACE_DELIMITER << co.class_number << endl;\n            if (is_professor(co.posts[i].author_id))\n            {\n                Professors *pro = find_professor_by_id_(co.posts[i].author_id);\n                cout << co.posts[i].id << SPACE_DELIMITER << pro->get_name() << SPACE_DELIMITER << co.posts[i].title << SPACE_DELIMITER << co.posts[i].message << endl;\n            }\n            else if (is_student(co.posts[i].author_id))\n            {\n                Student *stu = find_student_by_id_(co.posts[i].author_id);\n                cout << co.posts[i].id << SPACE_DELIMITER << stu->get_name() << SPACE_DELIMITER << co.posts[i].title << endl;\n            }\n            break;\n        }\n        else\n        {\n            throw runtime_error(NOT_FOUND_ERROR);\n        }\n    }\n}\n\nvoid Orders::handeling_Get(vector<string> command)\n{\n    if (command[1] == NOTIFICATION_REQUEST)\n    {\n        Get_notification(command, utms);\n    }\n    else if (command[1] == COURSES_REQUEST)\n    {\n        if (command.size() == 3)\n            Get_all_courses(utms);\n        else\n            Get_courses(command[4], utms);\n    }\n    else if (command[1] == POST_REQUEST)\n    {\n        Get_post(command[4], command[6], utms);\n    }\n    else if (command[1] == PERSONAL_PAGE_REQUEST)\n    {\n        Get_personal_page(command[4], utms);\n    }\n    else if (command[1] == MY_COURSES_REQUEST)\n    {\n        Get_my_courses(utms);\n    }\n    else if (command[1] == \"course_channel\")\n    {\n        Get_course_channel(command[4], utms);\n    }\n    else if (command[1] == \"course_post\")\n    {\n        Get_course_post(command[4], command[6], utms);\n    }\n\n    else\n        throw runtime_error(NOT_FOUND_ERROR);\n}\n\nvoid Orders::Put_my_courses(string id, UTMS *utms)\n{\n    bool exists = false;\n    if (!utms->is_logined)\n        throw runtime_error(PERMISSION_DENIED_ERROR);\n    if (!(is_int(id) && stoi(id) >= NATURAL_NUMBER))\n        throw runtime_error(BAD_REQUEST_ERROR);\n    for (int i = 0; i < course_offers.size(); i++)\n    {\n        if (id == to_string(course_offers[i].course_offer_id))\n            exists = true;\n    }\n    if (!exists)\n        throw runtime_error(NOT_FOUND_ERROR);\n\n    Student *s = utms->student_logined;\n    course_offer co = find_course_offer_by_id(id);\n    Course *c = find_course_by_id(to_string(co.course_id));\n    if (s->get_semester() < c->get_prerequisite())\n        throw runtime_error(PERMISSION_DENIED_ERROR);\n\n    vector<string> major_ids = divider_order(c->get_major_id(), SEMI_COLON_DELIMITER);\n    bool flag = false;\n    for (int i = 0; i < major_ids.size(); i++)\n    {\n        if ((major_ids[i] == s->get_major_id()))\n        {\n            flag = true;\n            break;\n        }\n    }\n    if (!flag)\n        throw runtime_error(PERMISSION_DENIED_ERROR);\n\n    for (int i = 0; i < s->get_my_courses().size(); i++)\n    {\n        if (s->get_my_courses()[i].exam_date.day == co.exam_date.day && s->get_my_courses()[i].exam_date.month == co.exam_date.month && s->get_my_courses()[i].exam_date.year == co.exam_date.year)\n            throw runtime_error(PERMISSION_DENIED_ERROR);\n    }\n    for (int i = 0; i < s->get_my_courses().size(); i++)\n    {\n        if (is_conflict_student(co.time, s))\n            throw runtime_error(PERMISSION_DENIED_ERROR);\n    }\n    s->add_my_courses(co);\n    string post_notif = s->get_sid() + SPACE_DELIMITER + s->get_name() + COLON_DELIMITER + SPACE_DELIMITER + GET_COURSE_MESSAGE;\n    cout << OK << endl;\n    if (send_notification_to_student(utms, post_notif))\n        return;\n    else if (send_notification_to_professor(utms, post_notif))\n        return;\n}\n\nvoid Orders::handeling_Put(vector<string> command)\n{\n    if (command[1] == MY_COURSES_REQUEST)\n    {\n        Put_my_courses(command[4], utms);\n    }\n    else\n        throw runtime_error(NOT_FOUND_ERROR);\n}\n\nvoid Orders::input()\n{\n    string line;\n    while (getline(cin, line))\n    {\n        if (line.size() < INVALID_SIZE)\n        {\n            cout << BAD_REQUEST_ERROR << endl;\n            continue;\n        }\n        vector<string> input_line = divider_order(line, SPACE_DELIMITER);\n        try\n        {\n            if (input_line[0] == POST_ORDER)\n            {\n                handeling_Post(input_line, line);\n            }\n            else if (input_line[0] == DELETE_ORDER)\n            {\n                handeling_Delete(input_line);\n            }\n            else if (input_line[0] == GET_ORDER)\n            {\n                handeling_Get(input_line);\n            }\n            else if (input_line[0] == PUT_ORDER)\n            {\n                handeling_Put(input_line);\n            }\n            // else if (input_line[0] == \"a\")\n            // {\n            //     cout << utms->get_student()[2]->get_posts()[0].id << endl;\n            // }\n            else\n            {\n                cout << BAD_REQUEST_ERROR << endl;\n            }\n        }\n        catch (runtime_error &ex)\n        {\n            cout << ex.what() << endl;\n        }\n    }\n}","filename":"/home/sajjad/Desktop/uplouad/Orders.cpp","identifier":"Text Change","lineCount":1374,"languageId":"cpp"},"failed":false}